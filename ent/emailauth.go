// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/OhMinsSup/story-server/ent/emailauth"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// EmailAuth is the model entity for the EmailAuth schema.
type EmailAuth struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Logged holds the value of the "logged" field.
	Logged bool `json:"logged,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailAuth) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailauth.FieldLogged:
			values[i] = &sql.NullBool{}
		case emailauth.FieldCode, emailauth.FieldEmail:
			values[i] = &sql.NullString{}
		case emailauth.FieldCreatedAt, emailauth.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		case emailauth.FieldID:
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type EmailAuth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailAuth fields.
func (ea *EmailAuth) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailauth.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ea.ID = *value
			}
		case emailauth.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ea.Code = value.String
			}
		case emailauth.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ea.Email = value.String
			}
		case emailauth.FieldLogged:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field logged", values[i])
			} else if value.Valid {
				ea.Logged = value.Bool
			}
		case emailauth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ea.CreatedAt = value.Time
			}
		case emailauth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ea.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this EmailAuth.
// Note that you need to call EmailAuth.Unwrap() before calling this method if this EmailAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EmailAuth) Update() *EmailAuthUpdateOne {
	return (&EmailAuthClient{config: ea.config}).UpdateOne(ea)
}

// Unwrap unwraps the EmailAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EmailAuth) Unwrap() *EmailAuth {
	tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailAuth is not a transactional entity")
	}
	ea.config.driver = tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EmailAuth) String() string {
	var builder strings.Builder
	builder.WriteString("EmailAuth(")
	builder.WriteString(fmt.Sprintf("id=%v", ea.ID))
	builder.WriteString(", code=")
	builder.WriteString(ea.Code)
	builder.WriteString(", email=")
	builder.WriteString(ea.Email)
	builder.WriteString(", logged=")
	builder.WriteString(fmt.Sprintf("%v", ea.Logged))
	builder.WriteString(", created_at=")
	builder.WriteString(ea.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ea.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EmailAuths is a parsable slice of EmailAuth.
type EmailAuths []*EmailAuth

func (ea EmailAuths) config(cfg config) {
	for _i := range ea {
		ea[_i].config = cfg
	}
}
