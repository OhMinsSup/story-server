// Code generated by entc, DO NOT EDIT.

package userprofile

import (
	"time"

	"github.com/OhMinsSup/story-server/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// ShortBio applies equality check predicate on the "short_bio" field. It's identical to ShortBioEQ.
func ShortBio(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortBio), v))
	})
}

// About applies equality check predicate on the "about" field. It's identical to AboutEQ.
func About(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbout), v))
	})
}

// Thumbnail applies equality check predicate on the "thumbnail" field. It's identical to ThumbnailEQ.
func Thumbnail(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThumbnail), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisplayName), v))
	})
}

// ShortBioEQ applies the EQ predicate on the "short_bio" field.
func ShortBioEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortBio), v))
	})
}

// ShortBioNEQ applies the NEQ predicate on the "short_bio" field.
func ShortBioNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShortBio), v))
	})
}

// ShortBioIn applies the In predicate on the "short_bio" field.
func ShortBioIn(vs ...string) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShortBio), v...))
	})
}

// ShortBioNotIn applies the NotIn predicate on the "short_bio" field.
func ShortBioNotIn(vs ...string) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShortBio), v...))
	})
}

// ShortBioGT applies the GT predicate on the "short_bio" field.
func ShortBioGT(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShortBio), v))
	})
}

// ShortBioGTE applies the GTE predicate on the "short_bio" field.
func ShortBioGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShortBio), v))
	})
}

// ShortBioLT applies the LT predicate on the "short_bio" field.
func ShortBioLT(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShortBio), v))
	})
}

// ShortBioLTE applies the LTE predicate on the "short_bio" field.
func ShortBioLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShortBio), v))
	})
}

// ShortBioContains applies the Contains predicate on the "short_bio" field.
func ShortBioContains(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShortBio), v))
	})
}

// ShortBioHasPrefix applies the HasPrefix predicate on the "short_bio" field.
func ShortBioHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShortBio), v))
	})
}

// ShortBioHasSuffix applies the HasSuffix predicate on the "short_bio" field.
func ShortBioHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShortBio), v))
	})
}

// ShortBioEqualFold applies the EqualFold predicate on the "short_bio" field.
func ShortBioEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShortBio), v))
	})
}

// ShortBioContainsFold applies the ContainsFold predicate on the "short_bio" field.
func ShortBioContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShortBio), v))
	})
}

// AboutEQ applies the EQ predicate on the "about" field.
func AboutEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbout), v))
	})
}

// AboutNEQ applies the NEQ predicate on the "about" field.
func AboutNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAbout), v))
	})
}

// AboutIn applies the In predicate on the "about" field.
func AboutIn(vs ...string) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAbout), v...))
	})
}

// AboutNotIn applies the NotIn predicate on the "about" field.
func AboutNotIn(vs ...string) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAbout), v...))
	})
}

// AboutGT applies the GT predicate on the "about" field.
func AboutGT(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAbout), v))
	})
}

// AboutGTE applies the GTE predicate on the "about" field.
func AboutGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAbout), v))
	})
}

// AboutLT applies the LT predicate on the "about" field.
func AboutLT(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAbout), v))
	})
}

// AboutLTE applies the LTE predicate on the "about" field.
func AboutLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAbout), v))
	})
}

// AboutContains applies the Contains predicate on the "about" field.
func AboutContains(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAbout), v))
	})
}

// AboutHasPrefix applies the HasPrefix predicate on the "about" field.
func AboutHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAbout), v))
	})
}

// AboutHasSuffix applies the HasSuffix predicate on the "about" field.
func AboutHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAbout), v))
	})
}

// AboutEqualFold applies the EqualFold predicate on the "about" field.
func AboutEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAbout), v))
	})
}

// AboutContainsFold applies the ContainsFold predicate on the "about" field.
func AboutContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAbout), v))
	})
}

// ThumbnailEQ applies the EQ predicate on the "thumbnail" field.
func ThumbnailEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThumbnail), v))
	})
}

// ThumbnailNEQ applies the NEQ predicate on the "thumbnail" field.
func ThumbnailNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThumbnail), v))
	})
}

// ThumbnailIn applies the In predicate on the "thumbnail" field.
func ThumbnailIn(vs ...string) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThumbnail), v...))
	})
}

// ThumbnailNotIn applies the NotIn predicate on the "thumbnail" field.
func ThumbnailNotIn(vs ...string) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThumbnail), v...))
	})
}

// ThumbnailGT applies the GT predicate on the "thumbnail" field.
func ThumbnailGT(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThumbnail), v))
	})
}

// ThumbnailGTE applies the GTE predicate on the "thumbnail" field.
func ThumbnailGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThumbnail), v))
	})
}

// ThumbnailLT applies the LT predicate on the "thumbnail" field.
func ThumbnailLT(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThumbnail), v))
	})
}

// ThumbnailLTE applies the LTE predicate on the "thumbnail" field.
func ThumbnailLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThumbnail), v))
	})
}

// ThumbnailContains applies the Contains predicate on the "thumbnail" field.
func ThumbnailContains(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThumbnail), v))
	})
}

// ThumbnailHasPrefix applies the HasPrefix predicate on the "thumbnail" field.
func ThumbnailHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThumbnail), v))
	})
}

// ThumbnailHasSuffix applies the HasSuffix predicate on the "thumbnail" field.
func ThumbnailHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThumbnail), v))
	})
}

// ThumbnailIsNil applies the IsNil predicate on the "thumbnail" field.
func ThumbnailIsNil() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThumbnail)))
	})
}

// ThumbnailNotNil applies the NotNil predicate on the "thumbnail" field.
func ThumbnailNotNil() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThumbnail)))
	})
}

// ThumbnailEqualFold applies the EqualFold predicate on the "thumbnail" field.
func ThumbnailEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThumbnail), v))
	})
}

// ThumbnailContainsFold applies the ContainsFold predicate on the "thumbnail" field.
func ThumbnailContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThumbnail), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		p(s.Not())
	})
}
