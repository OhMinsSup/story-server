// Code generated by entc, DO NOT EDIT.

package post

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the post type in the database.
	Label = "post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldThumbnail holds the string denoting the thumbnail field in the database.
	FieldThumbnail = "thumbnail"
	// FieldIsTemp holds the string denoting the is_temp field in the database.
	FieldIsTemp = "is_temp"
	// FieldIsMarkdown holds the string denoting the is_markdown field in the database.
	FieldIsMarkdown = "is_markdown"
	// FieldIsPrivate holds the string denoting the is_private field in the database.
	FieldIsPrivate = "is_private"
	// FieldURLSlug holds the string denoting the url_slug field in the database.
	FieldURLSlug = "url_slug"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// FieldViews holds the string denoting the views field in the database.
	FieldViews = "views"
	// FieldMeta holds the string denoting the meta field in the database.
	FieldMeta = "meta"
	// FieldReleasedAt holds the string denoting the released_at field in the database.
	FieldReleasedAt = "released_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"

	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"

	// Table holds the table name of the post in the database.
	Table = "posts"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "posts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "fk_user_id"
	// TagsTable is the table the holds the tags relation/edge. The primary key declared below.
	TagsTable = "tag_posts"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
)

// Columns holds all SQL columns for post fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldBody,
	FieldThumbnail,
	FieldIsTemp,
	FieldIsMarkdown,
	FieldIsPrivate,
	FieldURLSlug,
	FieldLikes,
	FieldViews,
	FieldMeta,
	FieldReleasedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Post type.
var ForeignKeys = []string{
	"fk_user_id",
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"tag_id", "post_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ThumbnailValidator is a validator for the "thumbnail" field. It is called by the builders before save.
	ThumbnailValidator func(string) error
	// DefaultIsPrivate holds the default value on creation for the "is_private" field.
	DefaultIsPrivate bool
	// URLSlugValidator is a validator for the "url_slug" field. It is called by the builders before save.
	URLSlugValidator func(string) error
	// DefaultLikes holds the default value on creation for the "likes" field.
	DefaultLikes int64
	// DefaultViews holds the default value on creation for the "views" field.
	DefaultViews int64
	// DefaultReleasedAt holds the default value on creation for the "released_at" field.
	DefaultReleasedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
