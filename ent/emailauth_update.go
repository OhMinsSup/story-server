// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/OhMinsSup/story-server/ent/emailauth"
	"github.com/OhMinsSup/story-server/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// EmailAuthUpdate is the builder for updating EmailAuth entities.
type EmailAuthUpdate struct {
	config
	hooks    []Hook
	mutation *EmailAuthMutation
}

// Where adds a new predicate for the EmailAuthUpdate builder.
func (eau *EmailAuthUpdate) Where(ps ...predicate.EmailAuth) *EmailAuthUpdate {
	eau.mutation.predicates = append(eau.mutation.predicates, ps...)
	return eau
}

// SetCode sets the "code" field.
func (eau *EmailAuthUpdate) SetCode(s string) *EmailAuthUpdate {
	eau.mutation.SetCode(s)
	return eau
}

// SetEmail sets the "email" field.
func (eau *EmailAuthUpdate) SetEmail(s string) *EmailAuthUpdate {
	eau.mutation.SetEmail(s)
	return eau
}

// SetLogged sets the "logged" field.
func (eau *EmailAuthUpdate) SetLogged(b bool) *EmailAuthUpdate {
	eau.mutation.SetLogged(b)
	return eau
}

// SetNillableLogged sets the "logged" field if the given value is not nil.
func (eau *EmailAuthUpdate) SetNillableLogged(b *bool) *EmailAuthUpdate {
	if b != nil {
		eau.SetLogged(*b)
	}
	return eau
}

// SetUpdatedAt sets the "updated_at" field.
func (eau *EmailAuthUpdate) SetUpdatedAt(t time.Time) *EmailAuthUpdate {
	eau.mutation.SetUpdatedAt(t)
	return eau
}

// Mutation returns the EmailAuthMutation object of the builder.
func (eau *EmailAuthUpdate) Mutation() *EmailAuthMutation {
	return eau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EmailAuthUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eau.defaults()
	if len(eau.hooks) == 0 {
		affected, err = eau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eau.mutation = mutation
			affected, err = eau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eau.hooks) - 1; i >= 0; i-- {
			mut = eau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EmailAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EmailAuthUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EmailAuthUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eau *EmailAuthUpdate) defaults() {
	if _, ok := eau.mutation.UpdatedAt(); !ok {
		v := emailauth.UpdateDefaultUpdatedAt()
		eau.mutation.SetUpdatedAt(v)
	}
}

func (eau *EmailAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailauth.Table,
			Columns: emailauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailauth.FieldID,
			},
		},
	}
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailauth.FieldCode,
		})
	}
	if value, ok := eau.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailauth.FieldEmail,
		})
	}
	if value, ok := eau.mutation.Logged(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: emailauth.FieldLogged,
		})
	}
	if value, ok := eau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: emailauth.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailauth.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmailAuthUpdateOne is the builder for updating a single EmailAuth entity.
type EmailAuthUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmailAuthMutation
}

// SetCode sets the "code" field.
func (eauo *EmailAuthUpdateOne) SetCode(s string) *EmailAuthUpdateOne {
	eauo.mutation.SetCode(s)
	return eauo
}

// SetEmail sets the "email" field.
func (eauo *EmailAuthUpdateOne) SetEmail(s string) *EmailAuthUpdateOne {
	eauo.mutation.SetEmail(s)
	return eauo
}

// SetLogged sets the "logged" field.
func (eauo *EmailAuthUpdateOne) SetLogged(b bool) *EmailAuthUpdateOne {
	eauo.mutation.SetLogged(b)
	return eauo
}

// SetNillableLogged sets the "logged" field if the given value is not nil.
func (eauo *EmailAuthUpdateOne) SetNillableLogged(b *bool) *EmailAuthUpdateOne {
	if b != nil {
		eauo.SetLogged(*b)
	}
	return eauo
}

// SetUpdatedAt sets the "updated_at" field.
func (eauo *EmailAuthUpdateOne) SetUpdatedAt(t time.Time) *EmailAuthUpdateOne {
	eauo.mutation.SetUpdatedAt(t)
	return eauo
}

// Mutation returns the EmailAuthMutation object of the builder.
func (eauo *EmailAuthUpdateOne) Mutation() *EmailAuthMutation {
	return eauo.mutation
}

// Save executes the query and returns the updated EmailAuth entity.
func (eauo *EmailAuthUpdateOne) Save(ctx context.Context) (*EmailAuth, error) {
	var (
		err  error
		node *EmailAuth
	)
	eauo.defaults()
	if len(eauo.hooks) == 0 {
		node, err = eauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eauo.mutation = mutation
			node, err = eauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eauo.hooks) - 1; i >= 0; i-- {
			mut = eauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EmailAuthUpdateOne) SaveX(ctx context.Context) *EmailAuth {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EmailAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EmailAuthUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eauo *EmailAuthUpdateOne) defaults() {
	if _, ok := eauo.mutation.UpdatedAt(); !ok {
		v := emailauth.UpdateDefaultUpdatedAt()
		eauo.mutation.SetUpdatedAt(v)
	}
}

func (eauo *EmailAuthUpdateOne) sqlSave(ctx context.Context) (_node *EmailAuth, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailauth.Table,
			Columns: emailauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailauth.FieldID,
			},
		},
	}
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EmailAuth.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := eauo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailauth.FieldCode,
		})
	}
	if value, ok := eauo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailauth.FieldEmail,
		})
	}
	if value, ok := eauo.mutation.Logged(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: emailauth.FieldLogged,
		})
	}
	if value, ok := eauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: emailauth.FieldUpdatedAt,
		})
	}
	_node = &EmailAuth{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailauth.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
