// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/OhMinsSup/story-server/ent/post"
	"github.com/OhMinsSup/story-server/ent/user"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Thumbnail holds the value of the "thumbnail" field.
	Thumbnail *string `json:"thumbnail,omitempty"`
	// IsTemp holds the value of the "is_temp" field.
	IsTemp bool `json:"is_temp,omitempty"`
	// IsMarkdown holds the value of the "is_markdown" field.
	IsMarkdown bool `json:"is_markdown,omitempty"`
	// IsPrivate holds the value of the "is_private" field.
	IsPrivate bool `json:"is_private,omitempty"`
	// URLSlug holds the value of the "url_slug" field.
	URLSlug string `json:"url_slug,omitempty"`
	// Likes holds the value of the "likes" field.
	Likes int64 `json:"likes,omitempty"`
	// Views holds the value of the "views" field.
	Views int64 `json:"views,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta map[string]interface{} `json:"meta,omitempty"`
	// ReleasedAt holds the value of the "released_at" field.
	ReleasedAt time.Time `json:"released_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges      PostEdges `json:"edges"`
	fk_user_id *uuid.UUID
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// User holds the value of the user edge.
	User *User
	// Tags holds the value of the tags edge.
	Tags []*Tag
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldMeta:
			values[i] = &[]byte{}
		case post.FieldIsTemp, post.FieldIsMarkdown, post.FieldIsPrivate:
			values[i] = &sql.NullBool{}
		case post.FieldLikes, post.FieldViews:
			values[i] = &sql.NullInt64{}
		case post.FieldTitle, post.FieldBody, post.FieldThumbnail, post.FieldURLSlug:
			values[i] = &sql.NullString{}
		case post.FieldReleasedAt, post.FieldCreatedAt, post.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		case post.FieldID:
			values[i] = &uuid.UUID{}
		case post.ForeignKeys[0]: // fk_user_id
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Post", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case post.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				po.Title = value.String
			}
		case post.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				po.Body = value.String
			}
		case post.FieldThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value.Valid {
				po.Thumbnail = new(string)
				*po.Thumbnail = value.String
			}
		case post.FieldIsTemp:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_temp", values[i])
			} else if value.Valid {
				po.IsTemp = value.Bool
			}
		case post.FieldIsMarkdown:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_markdown", values[i])
			} else if value.Valid {
				po.IsMarkdown = value.Bool
			}
		case post.FieldIsPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_private", values[i])
			} else if value.Valid {
				po.IsPrivate = value.Bool
			}
		case post.FieldURLSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_slug", values[i])
			} else if value.Valid {
				po.URLSlug = value.String
			}
		case post.FieldLikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes", values[i])
			} else if value.Valid {
				po.Likes = value.Int64
			}
		case post.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				po.Views = value.Int64
			}
		case post.FieldMeta:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %v", err)
				}
			}
		case post.FieldReleasedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field released_at", values[i])
			} else if value.Valid {
				po.ReleasedAt = value.Time
			}
		case post.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case post.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case post.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_user_id", values[i])
			} else if value != nil {
				po.fk_user_id = value
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Post entity.
func (po *Post) QueryUser() *UserQuery {
	return (&PostClient{config: po.config}).QueryUser(po)
}

// QueryTags queries the "tags" edge of the Post entity.
func (po *Post) QueryTags() *TagQuery {
	return (&PostClient{config: po.config}).QueryTags(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return (&PostClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", title=")
	builder.WriteString(po.Title)
	builder.WriteString(", body=")
	builder.WriteString(po.Body)
	if v := po.Thumbnail; v != nil {
		builder.WriteString(", thumbnail=")
		builder.WriteString(*v)
	}
	builder.WriteString(", is_temp=")
	builder.WriteString(fmt.Sprintf("%v", po.IsTemp))
	builder.WriteString(", is_markdown=")
	builder.WriteString(fmt.Sprintf("%v", po.IsMarkdown))
	builder.WriteString(", is_private=")
	builder.WriteString(fmt.Sprintf("%v", po.IsPrivate))
	builder.WriteString(", url_slug=")
	builder.WriteString(po.URLSlug)
	builder.WriteString(", likes=")
	builder.WriteString(fmt.Sprintf("%v", po.Likes))
	builder.WriteString(", views=")
	builder.WriteString(fmt.Sprintf("%v", po.Views))
	builder.WriteString(", meta=")
	builder.WriteString(fmt.Sprintf("%v", po.Meta))
	builder.WriteString(", released_at=")
	builder.WriteString(po.ReleasedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post

func (po Posts) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
