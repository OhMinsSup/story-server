// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/OhMinsSup/story-server/ent/authtoken"
	"github.com/OhMinsSup/story-server/ent/user"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// AuthToken is the model entity for the AuthToken schema.
type AuthToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthTokenQuery when eager-loading is set.
	Edges      AuthTokenEdges `json:"edges"`
	fk_user_id *uuid.UUID
}

// AuthTokenEdges holds the relations/edges for other nodes in the graph.
type AuthTokenEdges struct {
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthTokenEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthToken) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case authtoken.FieldDisabled:
			values[i] = &sql.NullBool{}
		case authtoken.FieldCreatedAt, authtoken.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		case authtoken.FieldID:
			values[i] = &uuid.UUID{}
		case authtoken.ForeignKeys[0]: // fk_user_id
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthToken fields.
func (at *AuthToken) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authtoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case authtoken.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				at.Disabled = value.Bool
			}
		case authtoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case authtoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		case authtoken.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_user_id", values[i])
			} else if value != nil {
				at.fk_user_id = value
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the AuthToken entity.
func (at *AuthToken) QueryUser() *UserQuery {
	return (&AuthTokenClient{config: at.config}).QueryUser(at)
}

// Update returns a builder for updating this AuthToken.
// Note that you need to call AuthToken.Unwrap() before calling this method if this AuthToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AuthToken) Update() *AuthTokenUpdateOne {
	return (&AuthTokenClient{config: at.config}).UpdateOne(at)
}

// Unwrap unwraps the AuthToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AuthToken) Unwrap() *AuthToken {
	tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthToken is not a transactional entity")
	}
	at.config.driver = tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AuthToken) String() string {
	var builder strings.Builder
	builder.WriteString("AuthToken(")
	builder.WriteString(fmt.Sprintf("id=%v", at.ID))
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", at.Disabled))
	builder.WriteString(", created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuthTokens is a parsable slice of AuthToken.
type AuthTokens []*AuthToken

func (at AuthTokens) config(cfg config) {
	for _i := range at {
		at[_i].config = cfg
	}
}
