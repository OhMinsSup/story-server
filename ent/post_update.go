// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/OhMinsSup/story-server/ent/post"
	"github.com/OhMinsSup/story-server/ent/predicate"
	"github.com/OhMinsSup/story-server/ent/user"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where adds a new predicate for the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetFkUserID sets the "fk_user_id" field.
func (pu *PostUpdate) SetFkUserID(u uuid.UUID) *PostUpdate {
	pu.mutation.SetFkUserID(u)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetBody sets the "body" field.
func (pu *PostUpdate) SetBody(s string) *PostUpdate {
	pu.mutation.SetBody(s)
	return pu
}

// SetThumbnail sets the "thumbnail" field.
func (pu *PostUpdate) SetThumbnail(s string) *PostUpdate {
	pu.mutation.SetThumbnail(s)
	return pu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (pu *PostUpdate) SetNillableThumbnail(s *string) *PostUpdate {
	if s != nil {
		pu.SetThumbnail(*s)
	}
	return pu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (pu *PostUpdate) ClearThumbnail() *PostUpdate {
	pu.mutation.ClearThumbnail()
	return pu
}

// SetIsTemp sets the "is_temp" field.
func (pu *PostUpdate) SetIsTemp(b bool) *PostUpdate {
	pu.mutation.SetIsTemp(b)
	return pu
}

// SetIsMarkdown sets the "is_markdown" field.
func (pu *PostUpdate) SetIsMarkdown(b bool) *PostUpdate {
	pu.mutation.SetIsMarkdown(b)
	return pu
}

// SetIsPrivate sets the "is_private" field.
func (pu *PostUpdate) SetIsPrivate(b bool) *PostUpdate {
	pu.mutation.SetIsPrivate(b)
	return pu
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIsPrivate(b *bool) *PostUpdate {
	if b != nil {
		pu.SetIsPrivate(*b)
	}
	return pu
}

// SetURLSlug sets the "url_slug" field.
func (pu *PostUpdate) SetURLSlug(s string) *PostUpdate {
	pu.mutation.SetURLSlug(s)
	return pu
}

// SetLikes sets the "likes" field.
func (pu *PostUpdate) SetLikes(i int64) *PostUpdate {
	pu.mutation.ResetLikes()
	pu.mutation.SetLikes(i)
	return pu
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLikes(i *int64) *PostUpdate {
	if i != nil {
		pu.SetLikes(*i)
	}
	return pu
}

// AddLikes adds i to the "likes" field.
func (pu *PostUpdate) AddLikes(i int64) *PostUpdate {
	pu.mutation.AddLikes(i)
	return pu
}

// SetViews sets the "views" field.
func (pu *PostUpdate) SetViews(i int64) *PostUpdate {
	pu.mutation.ResetViews()
	pu.mutation.SetViews(i)
	return pu
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (pu *PostUpdate) SetNillableViews(i *int64) *PostUpdate {
	if i != nil {
		pu.SetViews(*i)
	}
	return pu
}

// AddViews adds i to the "views" field.
func (pu *PostUpdate) AddViews(i int64) *PostUpdate {
	pu.mutation.AddViews(i)
	return pu
}

// SetMeta sets the "meta" field.
func (pu *PostUpdate) SetMeta(m map[string]interface{}) *PostUpdate {
	pu.mutation.SetMeta(m)
	return pu
}

// SetReleasedAt sets the "released_at" field.
func (pu *PostUpdate) SetReleasedAt(t time.Time) *PostUpdate {
	pu.mutation.SetReleasedAt(t)
	return pu
}

// SetNillableReleasedAt sets the "released_at" field if the given value is not nil.
func (pu *PostUpdate) SetNillableReleasedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetReleasedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PostUpdate) SetUserID(id uuid.UUID) *PostUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *PostUpdate) SetNillableUserID(id *uuid.UUID) *PostUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PostUpdate) SetUser(u *User) *PostUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PostUpdate) ClearUser() *PostUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Thumbnail(); ok {
		if err := post.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf("ent: validator failed for field \"thumbnail\": %w", err)}
		}
	}
	if v, ok := pu.mutation.URLSlug(); ok {
		if err := post.URLSlugValidator(v); err != nil {
			return &ValidationError{Name: "url_slug", err: fmt.Errorf("ent: validator failed for field \"url_slug\": %w", err)}
		}
	}
	return nil
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: post.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.FkUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: post.FieldFkUserID,
		})
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldTitle,
		})
	}
	if value, ok := pu.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldBody,
		})
	}
	if value, ok := pu.mutation.Thumbnail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldThumbnail,
		})
	}
	if pu.mutation.ThumbnailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: post.FieldThumbnail,
		})
	}
	if value, ok := pu.mutation.IsTemp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldIsTemp,
		})
	}
	if value, ok := pu.mutation.IsMarkdown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldIsMarkdown,
		})
	}
	if value, ok := pu.mutation.IsPrivate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldIsPrivate,
		})
	}
	if value, ok := pu.mutation.URLSlug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldURLSlug,
		})
	}
	if value, ok := pu.mutation.Likes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldLikes,
		})
	}
	if value, ok := pu.mutation.AddedLikes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldLikes,
		})
	}
	if value, ok := pu.mutation.Views(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldViews,
		})
	}
	if value, ok := pu.mutation.AddedViews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldViews,
		})
	}
	if value, ok := pu.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: post.FieldMeta,
		})
	}
	if value, ok := pu.mutation.ReleasedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldReleasedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedAt,
		})
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// SetFkUserID sets the "fk_user_id" field.
func (puo *PostUpdateOne) SetFkUserID(u uuid.UUID) *PostUpdateOne {
	puo.mutation.SetFkUserID(u)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetBody sets the "body" field.
func (puo *PostUpdateOne) SetBody(s string) *PostUpdateOne {
	puo.mutation.SetBody(s)
	return puo
}

// SetThumbnail sets the "thumbnail" field.
func (puo *PostUpdateOne) SetThumbnail(s string) *PostUpdateOne {
	puo.mutation.SetThumbnail(s)
	return puo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableThumbnail(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetThumbnail(*s)
	}
	return puo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (puo *PostUpdateOne) ClearThumbnail() *PostUpdateOne {
	puo.mutation.ClearThumbnail()
	return puo
}

// SetIsTemp sets the "is_temp" field.
func (puo *PostUpdateOne) SetIsTemp(b bool) *PostUpdateOne {
	puo.mutation.SetIsTemp(b)
	return puo
}

// SetIsMarkdown sets the "is_markdown" field.
func (puo *PostUpdateOne) SetIsMarkdown(b bool) *PostUpdateOne {
	puo.mutation.SetIsMarkdown(b)
	return puo
}

// SetIsPrivate sets the "is_private" field.
func (puo *PostUpdateOne) SetIsPrivate(b bool) *PostUpdateOne {
	puo.mutation.SetIsPrivate(b)
	return puo
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIsPrivate(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetIsPrivate(*b)
	}
	return puo
}

// SetURLSlug sets the "url_slug" field.
func (puo *PostUpdateOne) SetURLSlug(s string) *PostUpdateOne {
	puo.mutation.SetURLSlug(s)
	return puo
}

// SetLikes sets the "likes" field.
func (puo *PostUpdateOne) SetLikes(i int64) *PostUpdateOne {
	puo.mutation.ResetLikes()
	puo.mutation.SetLikes(i)
	return puo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLikes(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetLikes(*i)
	}
	return puo
}

// AddLikes adds i to the "likes" field.
func (puo *PostUpdateOne) AddLikes(i int64) *PostUpdateOne {
	puo.mutation.AddLikes(i)
	return puo
}

// SetViews sets the "views" field.
func (puo *PostUpdateOne) SetViews(i int64) *PostUpdateOne {
	puo.mutation.ResetViews()
	puo.mutation.SetViews(i)
	return puo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableViews(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetViews(*i)
	}
	return puo
}

// AddViews adds i to the "views" field.
func (puo *PostUpdateOne) AddViews(i int64) *PostUpdateOne {
	puo.mutation.AddViews(i)
	return puo
}

// SetMeta sets the "meta" field.
func (puo *PostUpdateOne) SetMeta(m map[string]interface{}) *PostUpdateOne {
	puo.mutation.SetMeta(m)
	return puo
}

// SetReleasedAt sets the "released_at" field.
func (puo *PostUpdateOne) SetReleasedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetReleasedAt(t)
	return puo
}

// SetNillableReleasedAt sets the "released_at" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableReleasedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetReleasedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PostUpdateOne) SetUserID(id uuid.UUID) *PostUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *PostUpdateOne) SetNillableUserID(id *uuid.UUID) *PostUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PostUpdateOne) SetUser(u *User) *PostUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PostUpdateOne) ClearUser() *PostUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	var (
		err  error
		node *Post
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Thumbnail(); ok {
		if err := post.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf("ent: validator failed for field \"thumbnail\": %w", err)}
		}
	}
	if v, ok := puo.mutation.URLSlug(); ok {
		if err := post.URLSlugValidator(v); err != nil {
			return &ValidationError{Name: "url_slug", err: fmt.Errorf("ent: validator failed for field \"url_slug\": %w", err)}
		}
	}
	return nil
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: post.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Post.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.FkUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: post.FieldFkUserID,
		})
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldTitle,
		})
	}
	if value, ok := puo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldBody,
		})
	}
	if value, ok := puo.mutation.Thumbnail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldThumbnail,
		})
	}
	if puo.mutation.ThumbnailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: post.FieldThumbnail,
		})
	}
	if value, ok := puo.mutation.IsTemp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldIsTemp,
		})
	}
	if value, ok := puo.mutation.IsMarkdown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldIsMarkdown,
		})
	}
	if value, ok := puo.mutation.IsPrivate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldIsPrivate,
		})
	}
	if value, ok := puo.mutation.URLSlug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldURLSlug,
		})
	}
	if value, ok := puo.mutation.Likes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldLikes,
		})
	}
	if value, ok := puo.mutation.AddedLikes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldLikes,
		})
	}
	if value, ok := puo.mutation.Views(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldViews,
		})
	}
	if value, ok := puo.mutation.AddedViews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldViews,
		})
	}
	if value, ok := puo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: post.FieldMeta,
		})
	}
	if value, ok := puo.mutation.ReleasedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldReleasedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedAt,
		})
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
