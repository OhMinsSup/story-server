// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/OhMinsSup/story-server/ent/authtoken"
	"github.com/OhMinsSup/story-server/ent/predicate"
	"github.com/OhMinsSup/story-server/ent/user"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// AuthTokenUpdate is the builder for updating AuthToken entities.
type AuthTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AuthTokenMutation
}

// Where adds a new predicate for the AuthTokenUpdate builder.
func (atu *AuthTokenUpdate) Where(ps ...predicate.AuthToken) *AuthTokenUpdate {
	atu.mutation.predicates = append(atu.mutation.predicates, ps...)
	return atu
}

// SetDisabled sets the "disabled" field.
func (atu *AuthTokenUpdate) SetDisabled(b bool) *AuthTokenUpdate {
	atu.mutation.SetDisabled(b)
	return atu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (atu *AuthTokenUpdate) SetNillableDisabled(b *bool) *AuthTokenUpdate {
	if b != nil {
		atu.SetDisabled(*b)
	}
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AuthTokenUpdate) SetUpdatedAt(t time.Time) *AuthTokenUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (atu *AuthTokenUpdate) SetUserID(id uuid.UUID) *AuthTokenUpdate {
	atu.mutation.SetUserID(id)
	return atu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (atu *AuthTokenUpdate) SetNillableUserID(id *uuid.UUID) *AuthTokenUpdate {
	if id != nil {
		atu = atu.SetUserID(*id)
	}
	return atu
}

// SetUser sets the "user" edge to the User entity.
func (atu *AuthTokenUpdate) SetUser(u *User) *AuthTokenUpdate {
	return atu.SetUserID(u.ID)
}

// Mutation returns the AuthTokenMutation object of the builder.
func (atu *AuthTokenUpdate) Mutation() *AuthTokenMutation {
	return atu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (atu *AuthTokenUpdate) ClearUser() *AuthTokenUpdate {
	atu.mutation.ClearUser()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AuthTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	atu.defaults()
	if len(atu.hooks) == 0 {
		affected, err = atu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atu.mutation = mutation
			affected, err = atu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atu.hooks) - 1; i >= 0; i-- {
			mut = atu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AuthTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AuthTokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AuthTokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AuthTokenUpdate) defaults() {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		v := authtoken.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
}

func (atu *AuthTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authtoken.Table,
			Columns: authtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: authtoken.FieldID,
			},
		},
	}
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: authtoken.FieldDisabled,
		})
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authtoken.FieldUpdatedAt,
		})
	}
	if atu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authtoken.UserTable,
			Columns: []string{authtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authtoken.UserTable,
			Columns: []string{authtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authtoken.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AuthTokenUpdateOne is the builder for updating a single AuthToken entity.
type AuthTokenUpdateOne struct {
	config
	hooks    []Hook
	mutation *AuthTokenMutation
}

// SetDisabled sets the "disabled" field.
func (atuo *AuthTokenUpdateOne) SetDisabled(b bool) *AuthTokenUpdateOne {
	atuo.mutation.SetDisabled(b)
	return atuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (atuo *AuthTokenUpdateOne) SetNillableDisabled(b *bool) *AuthTokenUpdateOne {
	if b != nil {
		atuo.SetDisabled(*b)
	}
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AuthTokenUpdateOne) SetUpdatedAt(t time.Time) *AuthTokenUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (atuo *AuthTokenUpdateOne) SetUserID(id uuid.UUID) *AuthTokenUpdateOne {
	atuo.mutation.SetUserID(id)
	return atuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (atuo *AuthTokenUpdateOne) SetNillableUserID(id *uuid.UUID) *AuthTokenUpdateOne {
	if id != nil {
		atuo = atuo.SetUserID(*id)
	}
	return atuo
}

// SetUser sets the "user" edge to the User entity.
func (atuo *AuthTokenUpdateOne) SetUser(u *User) *AuthTokenUpdateOne {
	return atuo.SetUserID(u.ID)
}

// Mutation returns the AuthTokenMutation object of the builder.
func (atuo *AuthTokenUpdateOne) Mutation() *AuthTokenMutation {
	return atuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (atuo *AuthTokenUpdateOne) ClearUser() *AuthTokenUpdateOne {
	atuo.mutation.ClearUser()
	return atuo
}

// Save executes the query and returns the updated AuthToken entity.
func (atuo *AuthTokenUpdateOne) Save(ctx context.Context) (*AuthToken, error) {
	var (
		err  error
		node *AuthToken
	)
	atuo.defaults()
	if len(atuo.hooks) == 0 {
		node, err = atuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atuo.mutation = mutation
			node, err = atuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atuo.hooks) - 1; i >= 0; i-- {
			mut = atuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AuthTokenUpdateOne) SaveX(ctx context.Context) *AuthToken {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AuthTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AuthTokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AuthTokenUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		v := authtoken.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
}

func (atuo *AuthTokenUpdateOne) sqlSave(ctx context.Context) (_node *AuthToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authtoken.Table,
			Columns: authtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: authtoken.FieldID,
			},
		},
	}
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AuthToken.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := atuo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: authtoken.FieldDisabled,
		})
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authtoken.FieldUpdatedAt,
		})
	}
	if atuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authtoken.UserTable,
			Columns: []string{authtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authtoken.UserTable,
			Columns: []string{authtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthToken{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authtoken.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
