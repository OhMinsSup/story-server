// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/OhMinsSup/story-server/ent/emailauth"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// EmailAuthCreate is the builder for creating a EmailAuth entity.
type EmailAuthCreate struct {
	config
	mutation *EmailAuthMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (eac *EmailAuthCreate) SetCode(s string) *EmailAuthCreate {
	eac.mutation.SetCode(s)
	return eac
}

// SetEmail sets the "email" field.
func (eac *EmailAuthCreate) SetEmail(s string) *EmailAuthCreate {
	eac.mutation.SetEmail(s)
	return eac
}

// SetLogged sets the "logged" field.
func (eac *EmailAuthCreate) SetLogged(b bool) *EmailAuthCreate {
	eac.mutation.SetLogged(b)
	return eac
}

// SetNillableLogged sets the "logged" field if the given value is not nil.
func (eac *EmailAuthCreate) SetNillableLogged(b *bool) *EmailAuthCreate {
	if b != nil {
		eac.SetLogged(*b)
	}
	return eac
}

// SetCreatedAt sets the "created_at" field.
func (eac *EmailAuthCreate) SetCreatedAt(t time.Time) *EmailAuthCreate {
	eac.mutation.SetCreatedAt(t)
	return eac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eac *EmailAuthCreate) SetNillableCreatedAt(t *time.Time) *EmailAuthCreate {
	if t != nil {
		eac.SetCreatedAt(*t)
	}
	return eac
}

// SetUpdatedAt sets the "updated_at" field.
func (eac *EmailAuthCreate) SetUpdatedAt(t time.Time) *EmailAuthCreate {
	eac.mutation.SetUpdatedAt(t)
	return eac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eac *EmailAuthCreate) SetNillableUpdatedAt(t *time.Time) *EmailAuthCreate {
	if t != nil {
		eac.SetUpdatedAt(*t)
	}
	return eac
}

// SetID sets the "id" field.
func (eac *EmailAuthCreate) SetID(u uuid.UUID) *EmailAuthCreate {
	eac.mutation.SetID(u)
	return eac
}

// Mutation returns the EmailAuthMutation object of the builder.
func (eac *EmailAuthCreate) Mutation() *EmailAuthMutation {
	return eac.mutation
}

// Save creates the EmailAuth in the database.
func (eac *EmailAuthCreate) Save(ctx context.Context) (*EmailAuth, error) {
	var (
		err  error
		node *EmailAuth
	)
	eac.defaults()
	if len(eac.hooks) == 0 {
		if err = eac.check(); err != nil {
			return nil, err
		}
		node, err = eac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eac.check(); err != nil {
				return nil, err
			}
			eac.mutation = mutation
			node, err = eac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eac.hooks) - 1; i >= 0; i-- {
			mut = eac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (eac *EmailAuthCreate) SaveX(ctx context.Context) *EmailAuth {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (eac *EmailAuthCreate) defaults() {
	if _, ok := eac.mutation.Logged(); !ok {
		v := emailauth.DefaultLogged
		eac.mutation.SetLogged(v)
	}
	if _, ok := eac.mutation.CreatedAt(); !ok {
		v := emailauth.DefaultCreatedAt()
		eac.mutation.SetCreatedAt(v)
	}
	if _, ok := eac.mutation.UpdatedAt(); !ok {
		v := emailauth.DefaultUpdatedAt()
		eac.mutation.SetUpdatedAt(v)
	}
	if _, ok := eac.mutation.ID(); !ok {
		v := emailauth.DefaultID()
		eac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eac *EmailAuthCreate) check() error {
	if _, ok := eac.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := eac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if _, ok := eac.mutation.Logged(); !ok {
		return &ValidationError{Name: "logged", err: errors.New("ent: missing required field \"logged\"")}
	}
	if _, ok := eac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := eac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (eac *EmailAuthCreate) sqlSave(ctx context.Context) (*EmailAuth, error) {
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (eac *EmailAuthCreate) createSpec() (*EmailAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailAuth{config: eac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: emailauth.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailauth.FieldID,
			},
		}
	)
	if id, ok := eac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eac.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailauth.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := eac.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailauth.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := eac.mutation.Logged(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: emailauth.FieldLogged,
		})
		_node.Logged = value
	}
	if value, ok := eac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: emailauth.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := eac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: emailauth.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// EmailAuthCreateBulk is the builder for creating many EmailAuth entities in bulk.
type EmailAuthCreateBulk struct {
	config
	builders []*EmailAuthCreate
}

// Save creates the EmailAuth entities in the database.
func (eacb *EmailAuthCreateBulk) Save(ctx context.Context) ([]*EmailAuth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*EmailAuth, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *EmailAuthCreateBulk) SaveX(ctx context.Context) []*EmailAuth {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
